//
//  SKIcons.swift
//  Testing
//
//  Created by AuthorName on 1/4/18.
//  Copyright Â© 2018 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class SKIcons : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfMessageBubble: UIImage?
        static var messageBubbleTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawMessageBubble(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// surface1
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 25, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 24), controlPoint1: CGPoint(x: 12.32, y: 4), controlPoint2: CGPoint(x: 2, y: 12.97))
        bezierPath.addCurve(to: CGPoint(x: 10.95, y: 39.84), controlPoint1: CGPoint(x: 2, y: 30.19), controlPoint2: CGPoint(x: 5.34, y: 36.07))
        bezierPath.addCurve(to: CGPoint(x: 8.18, y: 46.43), controlPoint1: CGPoint(x: 10.82, y: 40.89), controlPoint2: CGPoint(x: 10.29, y: 43.44))
        bezierPath.addLine(to: CGPoint(x: 7.08, y: 47.99))
        bezierPath.addLine(to: CGPoint(x: 9.05, y: 48))
        bezierPath.addCurve(to: CGPoint(x: 19.36, y: 43.39), controlPoint1: CGPoint(x: 14.48, y: 48), controlPoint2: CGPoint(x: 18.16, y: 44.67))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 44), controlPoint1: CGPoint(x: 21.2, y: 43.8), controlPoint2: CGPoint(x: 23.09, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 48, y: 24), controlPoint1: CGPoint(x: 37.68, y: 44), controlPoint2: CGPoint(x: 48, y: 35.03))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 4), controlPoint1: CGPoint(x: 48, y: 12.97), controlPoint2: CGPoint(x: 37.68, y: 4))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfMessageBubble: UIImage {
        if Cache.imageOfMessageBubble != nil {
            return Cache.imageOfMessageBubble!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            SKIcons.drawMessageBubble()

        Cache.imageOfMessageBubble = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfMessageBubble!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var messageBubbleTargets: [AnyObject]! {
        get { return Cache.messageBubbleTargets }
        set {
            Cache.messageBubbleTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SKIcons.imageOfMessageBubble)
            }
        }
    }




    @objc(SKIconsResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
